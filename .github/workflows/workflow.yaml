name: Push images to ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:
    branches:
      - main

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

env:
  REGION_NAME: ap-south-1

jobs:
  deploy:
    runs-on:  ubuntu-latest
    steps:
      - name: Checkout code on push or workflow dispatch
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ROLE_TO_ASSUME }}:role/ecs-automate
          role-session-name: ecs-session
          aws-region: ${{ env.REGION_NAME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
        # Safety measures but not expected 
        #
        # with:
        #   registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION_NAME }}.amazonaws.com
        #   username: docker_username_${{ secrets.DOCKER_USERNAME }}_dkr_ecr_aws_region_1_amazonaws_com
        #   password: docker_password_${{ secrets.DOCKER_PASS }}_dkr_ecr_aws_region_1_amazonaws_com
      - name: Get current date
        id: date
        run:  echo "::set-output name=date::$(date +'%d-%m-%y')"

      - name: Build, tag, and push image to Amazon ECR
        env:
          # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          ECR_REGISTRY: 069039788016.dkr.ecr.ap-south-1.amazonaws.com/node-ecs-gh
          ECR_REPOSITORY: node-ecs-gh
          IMAGE_TAG: node-ecs-gh-image-${{ github.run_number }}-${{ steps.date.outputs.date }}
          IMAGE_NAME: node-ecs-image
        run: |
          echo "docker build -t ${{ IMAGE_NAME }} ./nodeJS"
          echo "docker tag ${{ IMAGE_NAME }}:latest ${{ ECR_REGISTRY }}:${{ steps.date.outputs.date }}"
          echo "docker push ${{ ECR_REGISTRY }}:${{ steps.date.outputs.date }}"
          docker build -t ${{ IMAGE_NAME }} ./nodeJS
          docker tag ${{ IMAGE_NAME }}:latest ${{ ECR_REGISTRY }}:${{ steps.date.outputs.date }}
          docker push ${{ ECR_REGISTRY }}:${{ steps.date.outputs.date }}

